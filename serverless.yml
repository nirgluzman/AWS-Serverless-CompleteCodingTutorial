# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  stage: dev
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: '*'
  
  # Lambda function options configuration
  # https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console
  timeout: 10
  memorySize: 128

  # https://www.serverless.com/framework/docs/providers/aws/events/apigateway#setting-api-keys-for-your-rest-api
  apiGateway:
    apiKeys:
      - free:
          - freeApiKey
      - paid:
          - paidApiKey
    usagePlan:
      - free:
          quota:
            limit: 5
            period: MONTH
          throttle:
            burstLimit: 5
            rateLimit: 1
      - paid:
          quota:
            limit: 20
            period: MONTH
          throttle:
            burstLimit: 5
            rateLimit: 1

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: ${self:service}-${self:provider.stage}-14052023
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: /get-user/{ID}
          method: get
          private: true
  getAllPlayerScore:
    handler: lambdas/endpoints/getAllPlayerScore.handler
    description: SCAN table to return all items
    events:
      - httpApi:
          path: /player-score
          method: get
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    description: GET an item by ID
    events:
      - httpApi:
          path: /player-score/{ID}
          method: get
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    description: CREATE a new item in table
    events:
      - httpApi:
          path: /player-score
          method: post
  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    description: UPDATE the score attribute of an item
    events:
      - httpApi:
          path: /player-score/{ID}
          method: patch
  deletePlayerScore:
    handler: lambdas/endpoints/deletePlayerScore.handler
    description: DELETE an item by ID
    events:
      - httpApi:
          path: /player-score/{ID}
          method: delete
  getGameScores:
    handler: lambdas/endpoints/getGameScores.handler
    events:
      - httpApi:
          path: /game-scores/{game}
          method: get
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - httpApi:
          path: /file/{fileName}
          method: post
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - httpApi:
          path: /file/{fileName}
          method: get
  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: /chuck-norris/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: https://api.chucknorris.io/{proxy}
            parameters:
              paths:
                proxy: true
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - httpApi:
          path: /send-email
          method: post

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema:
              - AttributeName: game
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    MyAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: MyAssumeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
